//Pug is a view engine for creating views using html-like syntax
//It works by indentation and not nesting. Any reformatting may destroy the indentation
//Which will affect the syntax and its output

block variables
doctype html
html
  head
    meta(charset="utf-8")
    meta(name="viewport", content="width=device-width, initial-scale=1, shrink-to-fit=no")
    meta(name="theme-color", content="#000000")
    title #{title} | Treck  Traffic
    link(rel="stylesheet" href="./styles.css")
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Carme&display=swap" rel="stylesheet">

  body
    div#root
      block layout-content
    script. 
     console.log("Doing node in script tag") 
     console.log("scrip inside pug");
     
     const start = document.getElementById("start") 
     start.addEventListener('click',async ()=>{

       await fetch('http://localhost:5000/start');
       

     },false) 

     const arch = document.getElementById("archive") 
     arch.addEventListener('click',async ()=>{

       await fetch('http://localhost:5000/archives');
       

     },false) 

     const exelDb = document.getElementById("excelDb") 

     excelDb.addEventListener('click',async ()=>{
          
          try {
          const response = await fetch('http://localhost:5000/output', {
            method: 'GET',
            responseType: 'blob', // Set the response type to blob
          });

          // Set the filename for the downloaded file
          const filename = "data.json"; // Set the desired filename here
          const contentDispositionHeader = response.headers.get('content-disposition');
          const matches = /filename="(.+)"/.exec(contentDispositionHeader);
          const fileDownloadName = matches === null ? filename : matches[1];

          // Create a new blob from the response data
          const blob = await response.blob();

          // Create a new anchor element and set its download and href attributes
          const downloadLink = document.createElement('a');
          downloadLink.download = fileDownloadName;
          downloadLink.href = window.URL.createObjectURL(blob);

          // Programmatically click the download link to start the download
          document.body.appendChild(downloadLink);
          downloadLink.click();
          document.body.removeChild(downloadLink);
        } catch (error) {
          console.error(error);
        }

      },false) 

      const jsonDb = document.getElementById("jsonDb") 
      
      jsonDb.addEventListener('click',async ()=>{
         await fetch('http://localhost:5000/backup');

      },false)   
         